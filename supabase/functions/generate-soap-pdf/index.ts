
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.26.0";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface SoapNote {
  subjective: string;
  objective: string;
  assessment: string;
  plan: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders, status: 204 });
  }

  try {
    // Create Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL') ?? '';
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '';
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Get the authorization header
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: 'Missing authorization header' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 401 
        }
      );
    }

    // Extract JWT token
    const token = authHeader.replace('Bearer ', '');
    
    // Verify JWT token
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);
    if (authError || !user) {
      return new Response(
        JSON.stringify({ error: 'Unauthorized' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 401 
        }
      );
    }
    
    // Parse request body
    const { soapNote, noteId } = await req.json();
    
    if (!soapNote) {
      return new Response(
        JSON.stringify({ error: 'SOAP note is required' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 400 
        }
      );
    }
    
    // Format the SOAP note as HTML
    const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>SOAP Note</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        h1 {
          text-align: center;
          color: #333;
          margin-bottom: 30px;
        }
        h2 {
          color: #444;
          border-bottom: 1px solid #ddd;
          padding-bottom: 5px;
          margin-top: 20px;
        }
        .footer {
          margin-top: 50px;
          text-align: center;
          font-size: 12px;
          color: #666;
        }
        .metadata {
          margin-bottom: 30px;
          font-size: 14px;
          color: #666;
        }
      </style>
    </head>
    <body>
      <h1>SOAP Note</h1>
      
      <div class="metadata">
        <p>Generated on: ${new Date().toLocaleString()}</p>
        ${noteId ? `<p>Note ID: ${noteId}</p>` : ''}
      </div>
      
      <h2>Subjective</h2>
      <p>${soapNote.subjective.replace(/\n/g, '<br>')}</p>
      
      <h2>Objective</h2>
      <p>${soapNote.objective.replace(/\n/g, '<br>')}</p>
      
      <h2>Assessment</h2>
      <p>${soapNote.assessment.replace(/\n/g, '<br>')}</p>
      
      <h2>Plan</h2>
      <p>${soapNote.plan.replace(/\n/g, '<br>')}</p>
      
      <div class="footer">
        <p>Generated by AIDoctorNotes</p>
      </div>
    </body>
    </html>
    `;
    
    // Convert HTML to PDF using an external API
    const pdfApiEndpoint = 'https://api.pdfshift.io/v3/convert/pdf';
    const pdfApiKey = Deno.env.get('PDFSHIFT_API_KEY');
    
    if (!pdfApiKey) {
      // Fallback: If we don't have an API key, return a data URL with the HTML
      const dataUrl = `data:text/html;base64,${btoa(htmlContent)}`;
      return new Response(
        JSON.stringify({ 
          success: true,
          pdfUrl: dataUrl,
          format: 'html'
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200 
        }
      );
    }
    
    // Call PDF generation API
    const pdfResponse = await fetch(pdfApiEndpoint, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${btoa(`api:${pdfApiKey}`)}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        source: htmlContent,
        filename: `soap_note_${noteId || Date.now()}.pdf`,
        sandbox: false
      })
    });
    
    if (!pdfResponse.ok) {
      throw new Error(`PDF API error: ${await pdfResponse.text()}`);
    }
    
    const pdfBlob = await pdfResponse.blob();
    
    // Store the PDF in Supabase Storage
    const pdfFileName = `soap_notes/${user.id}/${noteId || Date.now()}.pdf`;
    
    // Check if the bucket exists, create it if it doesn't
    const { data: buckets } = await supabase.storage.listBuckets();
    if (!buckets?.find(bucket => bucket.name === 'clinical_documents')) {
      await supabase.storage.createBucket('clinical_documents', {
        public: false
      });
    }
    
    // Upload the PDF
    const { data, error: uploadError } = await supabase.storage
      .from('clinical_documents')
      .upload(pdfFileName, pdfBlob, {
        contentType: 'application/pdf',
        upsert: true
      });
    
    if (uploadError) {
      throw uploadError;
    }
    
    // Get a signed URL for the PDF
    const { data: urlData, error: urlError } = await supabase.storage
      .from('clinical_documents')
      .createSignedUrl(pdfFileName, 60 * 60); // 1 hour expiry
    
    if (urlError) {
      throw urlError;
    }
    
    return new Response(
      JSON.stringify({ 
        success: true,
        pdfUrl: urlData.signedUrl,
        format: 'pdf'
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    );
  } catch (error) {
    console.error('Error generating PDF:', error);
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message || 'An unknown error occurred' 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    );
  }
});
